#!/bin/sh
# Copyright notice:
# (c) 2021 Eduardo Rodriguez (@erodrigufer)
# (css code) (c) 2019 Felix Krause (MIT License) https://github.com/KrauseFx/markdown-to-html-github-style

# Store the basename of the script being executed
BASENAME_SCRIPT=$(basename $0)

HTML_FLAG="--html"
PDF_FLAG="--pdf"
CSS_FLAG="--css"

# file type for output file, either pdf or html
OUTPUT_FILE_TYPE=""

# css style
CSS_STYLE=""

# Declare function to print usage
print_usage () {
echo " 
usage: ${BASENAME_SCRIPT} ${HTML_FLAG} | ${PDF_FLAG} [${CSS_FLAG} <css style name>] <input Markdown file name>
	${HTML_FLAG} : Convert input Markdown file to HTML
	${PDF_FLAG} : Convert input Markdown file to pdf
	${CSS_FLAG} : Use a css template for html output file
		- gh : GitHub Markdown rendering css template
		- sober
";
exit 1;

}

#determine_css_style() {
#echo css
#[ "$3" == "gh" ] && { CSS_STYLE="gh"; return 0; }
#[ "$3" == "sober" ] && { CSS_STYLE="sober"; return 0; }
#
## error-handling
#print_usage
#}

# TODO: the flag parsing is HORRIBLE, it must be fix in the future :P
# TODO: do all the error handling properly, if the css flag is wrong, or if one of the styles does not exist

determine_flags() {
# Flag is html, change variable and return
[ "$1" = "${HTML_FLAG}" ] && { OUTPUT_FILE_TYPE="html"; return 0; }
# Flag is pdf, change variable and return
[ "$1" = "${PDF_FLAG}" ] && { OUTPUT_FILE_TYPE="pdf"; return 0; }
# The flags were not correct, print_usage and exit
print_usage
}

# the file that gets css styling should be the 1st positional parameter 
add_css() {
# html file to convert should be the first parameter of add_css()
local TEXT_FILE="$1"

local TEMP_FILE=${TEXT_FILE}.tmp

# make temp file
cp ${TEXT_FILE} ${TEMP_FILE}

# TODO: option to add title
# -i (alter the file being used) -e (to append commands, I still don't get it)
# Append style to the end
# -i (alter the file being used) -e (to append commands, I still don't get it)
sed  -e '1i \
<html> \
\	<head> \
\		<title></title> \
\		<meta name="viewport" content="width=device-width, initial-scale=1"> \
\	</head> \
\	<body> \
<div id='content'> \
' -e '$a \
</div> \
 \
<style type='text/css'>body { \
  font: 400 16px/1.5 "Helvetica Neue", Helvetica, Arial, sans-serif; \
  color: #111; \
  background-color: #fdfdfd; \
  -webkit-text-size-adjust: 100%; \
  -webkit-font-feature-settings: "kern" 1; \
  -moz-font-feature-settings: "kern" 1; \
  -o-font-feature-settings: "kern" 1; \
  font-feature-settings: "kern" 1; \
  font-kerning: normal; \
  padding: 30px; \
} \
 \
@media only screen and (max-width: 600px) { \
  body { \
    padding: 5px; \
  } \
 \
  body > #content { \
    padding: 0px 20px 20px 20px !important; \
  } \
} \
 \
body > #content { \
  margin: 0px; \
  max-width: 900px; \
  border: 1px solid #e1e4e8; \
  padding: 10px 40px; \
  padding-bottom: 20px; \
  border-radius: 2px; \
  margin-left: auto; \
  margin-right: auto; \
} \
 \
hr { \
  color: #bbb; \
  background-color: #bbb; \
  height: 1px; \
  flex: 0 1 auto; \
  margin: 1em 0; \
  padding: 0; \
  border: none; \
} \
 \
/** \
 * Links \
 */ \
a { \
  color: #0366d6; \
  text-decoration: none; } \
  a:visited { \
    color: #0366d6; } \
  a:hover { \
    color: #0366d6; \
    text-decoration: underline; } \
 \
pre { \
  background-color: #f6f8fa; \
  border-radius: 3px; \
  font-size: 85%; \
  line-height: 1.45; \
  overflow: auto; \
  padding: 16px; \
} \
 \
/** \
  * Code blocks \
  */ \
 \
code { \
  background-color: rgba(27,31,35,.05); \
  border-radius: 3px; \
  font-size: 85%; \
  margin: 0; \
  word-wrap: break-word; \
  padding: .2em .4em; \
  font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,Courier,monospace; \
} \
 \
pre > code { \
  background-color: transparent; \
  border: 0; \
  display: inline; \
  line-height: inherit; \
  margin: 0; \
  overflow: visible; \
  padding: 0; \
  word-wrap: normal; \
  font-size: 100%; \
} \
 \
 \
/** \
 * Blockquotes \
 */ \
blockquote { \
  margin-left: 30px; \
  margin-top: 0px; \
  margin-bottom: 16px; \
  border-left-width: 3px; \
  padding: 0 1em; \
  color: #828282; \
  border-left: 4px solid #e8e8e8; \
  padding-left: 15px; \
  font-size: 18px; \
  letter-spacing: -1px; \
  font-style: italic; \
} \
blockquote * { \
  font-style: normal !important; \
  letter-spacing: 0; \
  color: #6a737d !important; \
} \
 \
/** \
 * Tables \
 */ \
table { \
  border-spacing: 2px; \
  display: block; \
  font-size: 14px; \
  overflow: auto; \
  width: 100%; \
  margin-bottom: 16px; \
  border-spacing: 0; \
  border-collapse: collapse; \
} \
 \
td { \
  padding: 6px 13px; \
  border: 1px solid #dfe2e5; \
} \
 \
th { \
  font-weight: 600; \
  padding: 6px 13px; \
  border: 1px solid #dfe2e5; \
} \
 \
tr { \
  background-color: #fff; \
  border-top: 1px solid #c6cbd1; \
} \
 \
table tr:nth-child(2n) { \
  background-color: #f6f8fa; \
} \
 \
/** \
 * Others \
 */ \
 \
img { \
  max-width: 100%; \
} \
 \
p { \
  line-height: 24px; \
  font-weight: 400; \
  font-size: 16px; \
  color: #24292e; } \
 \
ul { \
  margin-top: 0; } \
 \
li { \
  color: #24292e; \
  font-size: 16px; \
  font-weight: 400; \
  line-height: 1.5; } \
 \
li + li { \
  margin-top: 0.25em; } \
 \
* { \
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; \
  color: #24292e; } \
 \
a:visited { \
  color: #0366d6; } \
 \
h1, h2, h3 { \
  border-bottom: 1px solid #eaecef; \
  color: #111; \
  /* Darker */ } </style> \
 \
 \
</body> \
</html> ' <${TEMP_FILE} >${TEXT_FILE}

# remove temp file
rm ${TEMP_FILE}
}

# Get the first argument, it could either be: --html, --pdf or the input file name
# Check if first positional parameter is not empty, if empty -> print_usage
[ -z "$1" ] && print_usage

determine_flags $@ # pass all positional parameters from file to function

# Get the first argument, which should be the file to convert
FILE_TO_CONVERT=$2

# Check if user specified a file to convert
# -z is true if the next string is empty
[ -z ${FILE_TO_CONVERT} ] && print_usage

# Check if file specified exists and is a regular file (-f option)
[ -f ${FILE_TO_CONVERT} ] || { echo "Error: The file to convert either does not exist or is not a regular file." 1>&2; print_usage; }

# Use cut to only get the file name without the file type
# '.' is the delimiter (-d), use the first element (-f 1)
FILE_BASENAME=$(echo "${FILE_TO_CONVERT}" | cut -f 1 -d '.')

# Create the file output name with the .pdf file type
FILE_OUTPUT_NAME=$(echo "${FILE_BASENAME}.${OUTPUT_FILE_TYPE}")

# Check if pandoc is installed
# if pandoc is not installed, exit status of which pandoc is 1
# redirect output of which pandoc to /dev/null (to not see anything in the prompt)
which pandoc 1>/dev/null  || { echo "Pandoc is not installed." 1>&2; exit 1; }

echo "Converting ${FILE_TO_CONVERT} from Markdown to ${OUTPUT_FILE_TYPE}..."

pandoc -o ${FILE_OUTPUT_NAME} ${FILE_TO_CONVERT} || { echo "Pandoc file conversion failed!" 1>&2; exit 1; }

echo "${FILE_OUTPUT_NAME} was successfully created!"

# only if file type is html continue to add css style to html output file, otherwise exit
[ "${OUTPUT_FILE_TYPE}"="html" ] || exit 0

# add css style to html file
add_css "${FILE_OUTPUT_NAME}"

#OS=Darwin
# Check if OS is Mac OS X (Darwin)
# uname == Darwin
# test expression, compare string of command evaluation
# if test expression is true, then exit with 0
# iff Mac OS is being used, run 'open' to open the newly created pdf
# this makes the script portable across UNIX systems
#[ $(uname) = "${OS}" ] && { echo "Open newly created ${OUTPUT_FILE_TYPE} file."; open ${FILE_OUTPUT_NAME}; }

exit 0
